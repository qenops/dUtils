__version__ = '0.1'
__author__ = ('David Dunn')

import sys, argparse, os, inspect
from collections import OrderedDict
import numpy as np

def generateHeader():
    header = '#'*80
    header += '\n# Config automatically generated by %s version %s'%(__name__, __version__)
    header += '\n%s'%('#'*80)
    header += '\n\n'
    return header

def writeObject(obj, name, path=None):
    output = '### loading %s ###\n'%name
    diff = obj
    if obj.__class__.__module__ == __name__:
        diff = [i for i in obj.__dir__() if i[:2] != '__']
        diff.sort()
        for k in diff:
            output += '%s = %s\n'%(k,getattr(obj,k))
        output += '\n'
    else:
        output += 'import %s\n'%obj.__class__.__module__
        required = OrderedDict()
        try:
            default = obj.__class__()
        except:  # it has some required args that we didn't pass - lets find those and pass them and remember to pass them when we create the object
            sig = inspect.signature(obj.__class__)
            for par in sig.parameters:
                if sig.parameters[par].default == inspect.Parameter.empty:
                    required[par] = getattr(obj,par)
            default = obj.__class__(**required)
        try:
            diff = objectDiff(obj, default)
        except:  # we couldn't diff the object (it is complex), so just store it in a binary and load it in config file
            if path is None:
                path = '.'
            np.savez(os.path.join(path,name),obj)      # I'm using numpy to save objects just because its easy - we could switch to pickle
            output += '# load saved object\n'
            output += 'import numpy as np\n'
            output += '%s = np.load("%s.npz")["arr_0"].item()\n'%(name,os.path.join(path,name))
            output += 'import copy\n'
            output += '%s = copy.copy(%s)\n'%(name,name)
        else:    
            output += '%s = %s.%s(%s)\n'%(name, obj.__class__.__module__, obj.__class__.__name__,', '.join("{!s}={!r}".format(key,val) for (key,val) in required.items())) 
            diff = [i for i in diff.__dir__() if i[:2] != '__']
            diff.sort()
            for k in diff:
                output += '%s.%s = %s\n'%(name,k,getattr(obj,k))
        output += '\n'
    return output

def argsToAttr(**kwargs):
    obj = type('', (), {})()
    for k,v in kwargs:
        setattr(obj, k, v)
    return obj

def objectDiff(obj, other):
    diff = type('', (), {})()
    for k in [i for i in obj.__dir__() if i[:2] != '__']:
        if not hasattr(other, k) or getattr(other,k) != getattr(obj,k):
            setattr(diff, k, getattr(obj,k))
    return diff

def dictDiff(obj, other):
    diff = type('', (), {})()
    for k,v in obj.items():
        #print(k)
        if isinstance(v,np.ndarray) and (not k in other or np.array_equal(other[k],v)):
            setattr(diff, k, v)
        elif not k in other or other[k] != v:
            setattr(diff, k, v)
    return diff

def configDiff(config, other):
    # not going to look for removed items - that is not the point
    diff = type('', (), {})()
    for k,v in config.__dict__.items():
        #print(k)
        if not hasattr(other, k) or getattr(other,k) != v:
            setattr(diff, k, v)
    return diff

def copyModule(old):
    new = type(old)(old.__name__, old.__doc__)
    new.__dict__.update(old.__dict__)
    for k,v in new.__dict__.items():
        if isinstance(v, dict):
            new.__dict__[k] = copy.copy(v)
    return new

def loadDict(configDict):
    config = type('', (), {})()
    for k,v in configDict.items():
        setattr(config, k, v)
    return config

def saveModule(file, strings, **kwargs):
    header = generateHeader()
    with open(file, 'w') as f:
        f.write(header)
        for s in strings:
            f.write(s)
        if kwargs:
            f.write('### Simple parameters ###\n')
            for k, v in kwargs.items():
                f.write('%s = %s\n'%(k,v))

def loadModule(file, name='config'):
    if sys.version_info[0] == 3:
        import importlib.util
        spec = importlib.util.spec_from_file_location(name, file)
        module = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(module)
    elif sys.version_info[0] == 2:
        import imp
        module = imp.load_source(name,file)
    return module
    
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument('-v', '--var', nargs='*', action='append', help='A varaible and value pair')
    args = parser.parse_args()
    config = loadModule('config.py')
    if args.var:
        for var in args.var:
            dtype = type(getattr(config, var[0]))
            if len(var) == 2:
                setattr(config, var[0], dtype(var[1]))
